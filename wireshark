## Filter by IP address: displays all traffic from IP, be it source or destination
ip.addr == 192.168.1.1

## Filter by source address: display traffic only from IP source
ip.src == 192.168.0.1

## Filter by destination: display traffic only form IP destination
ip.dst == 192.168.0.1

## Filter by IP subnet: display traffic from subnet, be it source or destination
ip.addr = 192.168.0.1/24

## Filter by protocol: filter traffic by protocol name
dns
http
ftp
arp
ssh
telnet
icmp

## Exclude IP address: remove traffic from and to IP address
!ip.addr ==192.168.0.1

## Display traffic between two specific subnet
ip.addr == 192.168.0.1/24 and ip.addr == 192.168.1.1/24

## Display traffic between two specific workstations
ip.addr == 192.168.0.1 and ip.addr == 192.168.0.2

## Filter by MAC
eth.addr = 00:50:7f:c5:b6:78

## Filter TCP port
tcp.port == 80

## Filter TCP port source
tcp.srcport == 80

## Filter TCP port destination
tcp.dstport == 80

## Find user agents
http.user_agent contains Firefox
!http.user_agent contains || !http.user_agent contains Chrome

## Filter broadcast traffic
!(arp or icmp or dns)

## Filter IP address and port
tcp.port == 80 && ip.addr == 192.168.0.1

## Filter all http get requests
http.request

## Filter all http get requests and responses
http.request or http.response

## Filter three way handshake
tcp.flags.syn==1 or (tcp.seq==1 and tcp.ack==1 and tcp.len==0 and tcp.analysis.initial_rtt)

## Find files by type
frame contains “(attachment|tar|exe|zip|pdf)”

## Find traffic based on keyword
tcp contains facebook
frame contains facebook

## Detecting SYN Floods
tcp.flags.syn == 1 and tcp.flags.ack == 0

Add new filters and save save us basic and basic+ 

basic (http.request or ssl.handshake.type == 1) and !(udp.port eq 1900)
basic+ (http.request or ssl.handshake.type == 1 or tcp.flags eq 0x0002) and !(udp.port eq 1900)
basic+DNS (http.request or ssl.handshake.type == 1 or tcp.flags eq 0x0002 or dns) and !(udp.port eq 1900)





ip.addr == 10.0.0.1 [Sets a filter for any packet with 10.0.0.1, as either the source or dest]  

ip.addr==10.0.0.1  && ip.addr==10.0.0.2 [sets a conversation filter between the two defined IP addresses]  

tcp.time_delta > .250 [sets a filter to display all tcp packets that have a delta time of greater than 250mSec in the context of their stream. Note, this filter requires TCP Conversation Timestamps to be calculated. To learn to do that, click here.]  

tcp.port==4000 [sets a filter for any TCP packet with 4000 as a source or dest port]  

tcp.flags == 0x012 [displays all TCP SYN/ACK packets - shows the connections that had a positive response. Related to this is tcp.flags.syn==1]  

ip.addr == 10.0.0.0/24 [Shows packets to and from any address in the 10.0.0.0/24 space]  

frame contains traffic [displays all packets that contain the word ‘traffic’. Excellent when searching on a specific string or user ID]  

!(arp or icmp or stp) [masks out arp, icmp, stp, or whatever other protocols may be background noise. Allowing you to focus on the traffic of interest]  

eth[0x47:2] == 01:80 [This is an example of an offset filter. It sets a filter for the HEX values of 0x01 and 0x80 specifically at the offset location of 0x47]  

tcp.analysis.flags && !tcp.analysis.window_update [displays all retransmissions, duplicate acks, zero windows, and more in the trace. Helps when tracking down slow application performance and packet loss. It will not include the window updates, since these aren't really important for me to see in most cases.] 
